{"version":3,"file":"static/js/736.30d0d59b.chunk.js","mappings":"yQAEaA,EAAOC,EAAAA,QAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0FAOhBC,EAAOH,EAAAA,QAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,gGAOhBG,EAAYL,EAAAA,QAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,yFAOtBK,EAAQP,EAAAA,QAAAA,IAAUQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,gDAKlBO,EAAOT,EAAAA,QAAAA,EAAQU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,iCAIfS,EAAOX,EAAAA,QAAAA,EAAQY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,uD,SCiC5B,EAzDa,WACX,IAAQW,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA0BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAwBtB,OAtBAG,EAAAA,EAAAA,YAAU,WACHZ,IAGLa,EAAAA,EAAAA,GAAgB,OAAQb,GACrBc,MAAK,SAAAC,GAAe,IAAZT,EAAIS,EAAJT,KACFA,EAAKU,QAMVT,EAAQD,GACRK,EAAS,KANPA,EACE,oEAMN,IACCM,OAAM,kBACLN,EACE,oEACD,GAEP,GAAG,CAACX,KAGFkB,EAAAA,EAAAA,KAAA,OAAAC,SACa,KAAVT,GACCQ,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAChC,EAAI,CAAAiC,SACFb,EAAKc,KAAI,SAAAC,GAAK,OACbC,EAAAA,EAAAA,MAAChC,EAAI,CAAA6B,SAAA,EACHD,EAAAA,EAAAA,KAAC1B,EAAS,CAAA2B,UACRD,EAAAA,EAAAA,KAACxB,EAAK,CACJ6B,IACEF,EAAMG,aAAY,GAAAC,OAvCpB,8BAwCoB,QAAAA,OAAOJ,EAAMG,cAC3B,qEAENE,IAAKL,EAAMM,UAGfT,EAAAA,EAAAA,KAACpB,EAAI,CAAAqB,SAAEE,EAAMM,QACbL,EAAAA,EAAAA,MAAC1B,EAAI,CAAAuB,SAAA,CAAC,MAAIE,EAAMO,eAZPP,EAAMQ,GAaV,SAKbX,EAAAA,EAAAA,KAACY,EAAAA,EAAK,CAAAX,SAAET,KAIhB,C,yGC7DaqB,EAAY5C,EAAAA,QAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kCAIrByC,EAAQ3C,EAAAA,QAAAA,EAAQI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,gD,iGCJvB2C,EAAU,mCACVC,EAAW,+BAEV,SAAepB,EAAeqB,EAAAC,EAAAC,GAAA,OAAAC,EAAAC,MAAC,KAADC,UAAA,CAoBpC,SAAAF,IAAA,OAAAA,GAAAG,EAAAA,EAAAA,GAAAC,IAAAA,MApBM,SAAAC,EAA+BC,EAAMd,EAAIe,GAAK,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,IAAAA,MAAA,SAAAO,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAYjD,OAXIL,EAAiB,CACrBM,SAAU,sBACVC,UAAU,UAAD3B,OAAYI,GACrBwB,cAAe,gBACf/C,KAAK,UAADmB,OAAYI,EAAE,YAClByB,QAAQ,UAAD7B,OAAYI,EAAE,aAGjBiB,EAAe,IAAIS,gBAAgB,CACvCX,MAAOA,EACPY,eAAe,IACfR,EAAAE,KAAA,EAEqBO,EAAAA,EAAAA,IAAU,GAADhC,OAC3BQ,GAAQR,OAAGoB,EAAeF,GAAK,aAAAlB,OAAYO,EAAO,KAAAP,OAC1C,kBAATkB,EAA2BG,EAAe,KAE5C,KAAD,EAJa,OAARC,EAAQC,EAAAU,KAAAV,EAAAW,OAAA,SAKPZ,EAASa,MAAI,wBAAAZ,EAAAa,OAAA,GAAAnB,EAAA,MACrBJ,MAAA,KAAAC,UAAA,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","pages/HomePage/HomePage.styled.jsx","services/tmdb-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 16px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 120px;\n`;\n\nexport const PhotoWrap = styled.div`\n  width: 120px;\n  height: 160px;\n  display: flex;\n  align-content: center;\n`;\n\nexport const Photo = styled.img`\n  width: 100%;\n  object-fit: cover;\n`;\n\nexport const Info = styled.p`\n  text-align: center;\n`;\n\nexport const Name = styled.p`\n  text-align: center;\n  font-weight: bold;\n`;\n","import { Error } from 'pages/HomePage/HomePage.styled';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMoviesData } from 'services/tmdb-api';\nimport { Info, Item, List, Name, Photo, PhotoWrap } from './Cast.styled';\n\nconst POSTERS_URL = 'https://image.tmdb.org/t/p/';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    fetchMoviesData('cast', movieId)\n      .then(({ cast }) => {\n        if (!cast.length) {\n          setError(\n            'We are sorry, but something went wrong :( Please, try again later'\n          );\n          return;\n        }\n        setCast(cast);\n        setError('');\n      })\n      .catch(() =>\n        setError(\n          'We are sorry, but something went wrong :( Please, try again later'\n        )\n      );\n  }, [movieId]);\n\n  return (\n    <div>\n      {error === '' ? (\n        <div>\n          <List>\n            {cast.map(actor => (\n              <Item key={actor.id}>\n                <PhotoWrap>\n                  <Photo\n                    src={\n                      actor.profile_path\n                        ? `${POSTERS_URL}w200${actor.profile_path}`\n                        : 'https://cdn.pixabay.com/photo/2013/05/30/18/21/cat-114782_1280.jpg'\n                    }\n                    alt={actor.name}\n                  />\n                </PhotoWrap>\n                <Name>{actor.name}</Name>\n                <Info>as {actor.character}</Info>\n              </Item>\n            ))}\n          </List>\n        </div>\n      ) : (\n        <Error>{error}</Error>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const PageTitle = styled.h2`\n  margin-bottom: 20px;\n`;\n\nexport const Error = styled.p`\n  font-size: 24px;\n  margin: 24px 0;\n`;\n","import axios from 'axios';\n\nconst api_key = '81bc6a75d9ad77927c9b3f7e8ad30411';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport async function fetchMoviesData(type, id, query) {\n  const endpointByType = {\n    trending: '/trending/movie/day',\n    movieById: `/movie/${id}`,\n    searchByQuery: '/search/movie',\n    cast: `/movie/${id}/credits`,\n    reviews: `/movie/${id}/reviews`,\n  };\n\n  const searchParams = new URLSearchParams({\n    query: query,\n    include_adult: true,\n  });\n\n  const response = await axios.get(\n    `${BASE_URL}${endpointByType[type]}?api_key=${api_key}&${\n      type === 'searchByQuery' ? searchParams : ''\n    }`\n  );\n  return response.data;\n}\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","Item","_templateObject2","PhotoWrap","_templateObject3","Photo","_templateObject4","Info","_templateObject5","Name","_templateObject6","movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","error","setError","useEffect","fetchMoviesData","then","_ref","length","catch","_jsx","children","map","actor","_jsxs","src","profile_path","concat","alt","name","character","id","Error","PageTitle","api_key","BASE_URL","_x","_x2","_x3","_fetchMoviesData","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","type","query","endpointByType","searchParams","response","_context","prev","next","trending","movieById","searchByQuery","reviews","URLSearchParams","include_adult","axios","sent","abrupt","data","stop"],"sourceRoot":""}